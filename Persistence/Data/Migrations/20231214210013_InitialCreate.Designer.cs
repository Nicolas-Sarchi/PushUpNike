// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(NikeDbContext))]
    [Migration("20231214210013_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Abrigos"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Camisetas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pantalones"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_detail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Image = "./img/abrigos/01.jpg",
                            Price = 1000.0,
                            ProductId = "abrigo-01",
                            Title = "Abrigo 01"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Image = "./img/abrigos/02.jpg",
                            Price = 1000.0,
                            ProductId = "abrigo-02",
                            Title = "Abrigo 02"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Image = "./img/abrigos/03.jpg",
                            Price = 1000.0,
                            ProductId = "abrigo-03",
                            Title = "Abrigo 03"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Image = "./img/abrigos/04.jpg",
                            Price = 1000.0,
                            ProductId = "abrigo-04",
                            Title = "Abrigo 04"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Image = "./img/abrigos/05.jpg",
                            Price = 1000.0,
                            ProductId = "abrigo-05",
                            Title = "Abrigo 05"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Image = "./img/camisetas/01.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-01",
                            Title = "Camiseta 01"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Image = "./img/camisetas/02.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-02",
                            Title = "Camiseta 02"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Image = "./img/camisetas/03.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-03",
                            Title = "Camiseta 03"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Image = "./img/camisetas/04.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-04",
                            Title = "Camiseta 04"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Image = "./img/camisetas/05.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-05",
                            Title = "Camiseta 05"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Image = "./img/camisetas/06.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-06",
                            Title = "Camiseta 06"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Image = "./img/camisetas/07.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-07",
                            Title = "Camiseta 07"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Image = "./img/camisetas/08.jpg",
                            Price = 1000.0,
                            ProductId = "camiseta-08",
                            Title = "Camiseta 08"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Image = "./img/pantalons/01.jpg",
                            Price = 1000.0,
                            ProductId = "pantalon-01",
                            Title = "Pantalón 01"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Image = "./img/pantalons/02.jpg",
                            Price = 1000.0,
                            ProductId = "pantalon-02",
                            Title = "Pantalón 02"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            Image = "./img/pantalons/03.jpg",
                            Price = 1000.0,
                            ProductId = "pantalon-03",
                            Title = "Pantalón 03"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            Image = "./img/pantalons/04.jpg",
                            Price = 1000.0,
                            ProductId = "pantalon-04",
                            Title = "Pantalón 04"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            Image = "./img/pantalons/05.jpg",
                            Price = 1000.0,
                            ProductId = "pantalon-05",
                            Title = "Pantalón 05"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Empleado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
